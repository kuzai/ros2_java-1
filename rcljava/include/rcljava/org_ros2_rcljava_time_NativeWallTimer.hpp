// Copyright 2017 Esteve Fernandez <esteve@apache.org>
// Copyright 2017-2018 Mickael Gaillard <mick.gaillard@gmail.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/* DO NOT EDIT THIS FILE - it is machine generated */

/* Header for class org_ros2_rcljava_time_NativeWallTimer */

#ifndef RCLJAVA__ORG_ROS2_RCLJAVA_TIME_NATIVEWALLTIMER_HPP_
#define RCLJAVA__ORG_ROS2_RCLJAVA_TIME_NATIVEWALLTIMER_HPP_

#include <jni.h>

#ifdef __cplusplus
extern "C" {
#endif

/*
 * Class:     org_ros2_rcljava_time_NativeWallTimer
 * Method:    nativeCreateTimerHandle
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL
  Java_org_ros2_rcljava_time_NativeWallTimer_nativeCreateTimerHandle
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_ros2_rcljava_time_NativeWallTimer
 * Method:    nativeDispose
 * Signature: (J)V
 */
JNIEXPORT void JNICALL
  Java_org_ros2_rcljava_time_NativeWallTimer_nativeDispose
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_ros2_rcljava_time_NativeWallTimer
 * Method:    nativeIsReady
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL
  Java_org_ros2_rcljava_time_NativeWallTimer_nativeIsReady
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_ros2_rcljava_time_NativeWallTimer
 * Method:    nativeIsCanceled
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL
  Java_org_ros2_rcljava_time_NativeWallTimer_nativeIsCanceled
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_ros2_rcljava_time_NativeWallTimer
 * Method:    nativeReset
 * Signature: (J)Z
 */
JNIEXPORT void JNICALL
  Java_org_ros2_rcljava_time_NativeWallTimer_nativeReset
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_ros2_rcljava_time_NativeWallTimer
 * Method:    nativeCancel
 * Signature: (J)Z
 */
JNIEXPORT void JNICALL
  Java_org_ros2_rcljava_time_NativeWallTimer_nativeCancel
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_ros2_rcljava_time_NativeWallTimer
 * Method:    nativeTimeUntilNextCall
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL
  Java_org_ros2_rcljava_time_NativeWallTimer_nativeTimeUntilNextCall
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_ros2_rcljava_time_NativeWallTimer
 * Method:    nativeTimeSinceLastCall
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL
  Java_org_ros2_rcljava_time_NativeWallTimer_nativeTimeSinceLastCall
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_ros2_rcljava_time_NativeWallTimer
 * Method:    nativeGetTimerPeriodNS
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL
  Java_org_ros2_rcljava_time_NativeWallTimer_nativeGetTimerPeriodNS
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_ros2_rcljava_time_NativeWallTimer
 * Method:    nativeSetTimerPeriodNS
 * Signature: (JJ)Z
 */
JNIEXPORT void JNICALL
  Java_org_ros2_rcljava_time_NativeWallTimer_nativeSetTimerPeriodNS
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_ros2_rcljava_time_NativeWallTimer
 * Method:    nativeCallTimer
 * Signature: (J)Z
 */
JNIEXPORT void JNICALL
  Java_org_ros2_rcljava_time_NativeWallTimer_nativeCallTimer
  (JNIEnv *, jclass, jlong);

#ifdef __cplusplus
}
#endif
#endif  // RCLJAVA__ORG_ROS2_RCLJAVA_TIME_NATIVEWALLTIMER_HPP_
